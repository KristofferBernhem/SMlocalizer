import java.util.ArrayList;

import ij.ImagePlus;
import ij.process.ByteProcessor;
import net.imagej.ImageJ;

public class driftCorr {
	ArrayList<Particle> 
	referenceParticle,		// Reference, check the other list against this one.
	shiftParticle;			// Shift this one to maximize correlation between the two lists.
	int[] maxShift;				// Maximal shift to calculate.

	driftCorr(ArrayList<Particle> Alpha, ArrayList<Particle> Beta, int[] maxShift){
		this.referenceParticle 	= Alpha;
		this.shiftParticle 		= Beta;
		this.maxShift			= maxShift;
	
	}
	
	/*
	 * IDEA: calculate NN distance vector. Filter out large numbers outside of maxShift. Mean or median of these shifts should maximize correlation.
	 */
	public double[] optimize()
	{
		double[] shiftX = new double[referenceParticle.size()];
		double[] shiftY = new double[referenceParticle.size()];
		double[] shiftZ = new double[referenceParticle.size()];
		double minDist  = maxShift[0];
		double distance = 0;
		double x,y,z;
		int idx = shiftParticle.size();
		int entry = 0;
		//double[] NN = new double[3];
		for (int A = 0; A < referenceParticle.size(); A++ ) // loop over all particles.
		{
			for (int B = 0; B < shiftParticle.size(); B++)
			{
				x = (referenceParticle.get(A).x - shiftParticle.get(B).x); 
				y = (referenceParticle.get(A).y - shiftParticle.get(B).y);
				z =	(referenceParticle.get(A).z - shiftParticle.get(B).z);
				x *= x;
				y *= y;
				z *= z;
				distance = x+y+z;					
				if (distance < minDist && distance < maxShift[0])
				{
					minDist  = distance;
					idx = B;
				}
			
			}
			if (idx < shiftParticle.size())
			{
				shiftX[0] += (referenceParticle.get(A).x - shiftParticle.get(idx).x);
				shiftY[1] += (referenceParticle.get(A).y - shiftParticle.get(idx).y);
				shiftZ[2] += (referenceParticle.get(A).z - shiftParticle.get(idx).z);
				entry++;
			}else
			{
				shiftX[0] += maxShift[0];
				shiftY[1] += maxShift[1];
				shiftZ[2] += maxShift[2];
				
			}
				
			idx = shiftParticle.size();
		}
		
	//	shift[0] /= entry;
	//	shift[1] /= entry;
	//	shift[2] /= entry;
		BackgroundCorrection.quickSort(shiftX, 0, shiftX.length-1);
		BackgroundCorrection.quickSort(shiftY, 0, shiftY.length-1);
		BackgroundCorrection.quickSort(shiftZ, 0, shiftZ.length-1);
		if (entry %2 != 0)
		{
			double[] outShift = {shiftX[(entry-1)/2],
					shiftY[(entry-1)/2],
					shiftZ[(entry-1)/2]};
			return outShift;
		}else
		{
			double[] outShift = {(shiftX[entry/2] + shiftX[entry/2 - 1]) / 2,
					(shiftY[entry/2] + shiftY[entry/2 - 1]) / 2,
					(shiftZ[entry/2] + shiftZ[entry/2 - 1]) / 2};
			return outShift;
		}
		
		
	}
	
	public static void main(String[] args){
		final ImageJ ij = new ImageJ();
		ij.ui().showUI();
/*		Particle P = new Particle();
		P.x = 100;
		P.y = 100;
		P.z = 50;*/		
		ArrayList<Particle> A = new ArrayList<Particle>();
		ArrayList<Particle> B = new ArrayList<Particle>();
/*		double drift = 0.01;
		for (double i = 0; i < 200; i++){
			Particle P2 = new Particle();
			P2.x = P.x - 2*i*drift;
			P2.y = P.y - i*drift;
			P2.z = P.z - 3*i*drift;
			
			A.add(P2);
			Particle P3 = new Particle();
			P3.x = P.x + i*drift;
			P3.y = P.y + i*drift;
			P3.z = P.z + i*drift;
								
			if (i == 499)
			{
				System.out.println("A:" + P2.x);
				System.out.println("B:" + P3.x);
			}
			B.add(P3);
		}*/
		double[] coordA = {5471.2, 2715.2,
				5390.4, 2800.8,
				5286.4, 2907.2,
				5381.6, 2807.2,
				5382.4, 2812.0,
				5929.6, 3289.6,
				1973.6, 3813.6,
				1980.8, 3815.2,
				2672.8, 2446.4,
				5374.4, 2803.2,
				2576.8, 2546.4,
				5484.0, 2713.6,
				2080.0, 2163.2,
				5380.0, 2808.0,
				1493.6, 4662.4,
				1488.8, 4668.8,
				4116.0, 2500.0,
				1493.6, 4665.6,
				1488.0, 4666.4,
				4118.4, 2507.2,
				5172.0, 2677.6,
				5251.2, 2564.8,
				5164.8, 2669.6,
				4572.8, 2410.4,
				4459.2, 2512.8,
				4558.4, 2400.8,
				1958.4, 3862.4,
				4460.0, 2505.6,
				2525.6, 2751.2,
				1854.4, 4004.8,
				2448.8, 2839.2,
				2955.2, 2433.6,
				3061.6, 2320.8,
				2972.8, 2422.4,
				1624.0, 4418.4,
				2946.4, 2421.6,
				1652.0, 4405.6,
				1815.2, 2144.0,
				4780.8, 2652.0,
				1824.0, 2142.4,
				2181.6, 3591.2,
				5166.4, 2698.4,
				2175.2, 3591.2,
				5263.2, 2590.4,
				2279.2, 3493.6,
				5276.8, 2672.0,
				4484.8, 2508.8,
				5636.8, 3152.0,
				5856.0, 2978.4,
				5768.8, 3079.2,
				5758.4, 3092.0,
				3803.2, 2428.8,
				6112.8, 3435.2,
				1489.6, 1877.6,
				3900.8, 2328.0,
				1953.6, 3676.8,
				2041.6, 3591.2,
				2048.0, 3597.6,
				1379.2, 5143.2,
				1480.0, 5040.8,
				1512.8, 6004.0,
				2650.4, 2452.0,
				1519.2, 6020.0,
				2743.2, 2360.8,
				1510.4, 5998.4,
				5480.8, 2743.2,
				1520.0, 6004.0,
				1529.6, 5989.6,
				5420.8, 2678.4,
				1526.4, 5996.8,
				5427.2, 2676.0,
				1452.8, 5039.2,
				2341.6, 3072.8,
				1341.6, 5140.8,
				2339.2, 3076.8,
				2340.8, 3076.8,
				4563.2, 2489.6,
				2327.2, 3077.6,
				4678.4, 2380.8,
				1346.4, 5140.0,
				1541.6, 4936.8,
				1960.0, 3615.2,
				4128.0, 2400.0,
				3383.2, 2461.6,
				3384.8, 2466.4,
				2100.8, 2260.0,
				2114.4, 2251.2,
				2118.4, 2255.2,
				2624.0, 3175.2,
				2629.6, 3180.0,
				3698.4, 2433.6,
				3701.6, 2436.8,
				2649.6, 2479.2,
				2658.4, 2548.0,
				3850.4, 2424.0,
				3851.2, 2400.0,
				3747.2, 2522.4,
				1878.4, 3944.8,
				1872.8, 3932.0,
				2054.4, 3452.0,
				2251.2, 3254.4,
				2252.8, 3257.6,
				1972.0, 3839.2,
				1974.4, 3827.2,
				1539.2, 4648.0,
				1872.0, 3931.2,
				1992.0, 2260.0,
				1636.8, 4551.2,
				1973.6, 3844.0,
				1548.8, 4661.6,
				1876.0, 3947.2,
				1542.4, 4652.0,
				2213.6, 3280.8,
				5270.4, 2639.2,
				2220.8, 3274.4,
				2213.6, 3280.0,
				3390.4, 1608.8,
				3376.8, 1606.4,
				5859.2, 3185.6,
				5860.8, 3199.2,
				5952.0, 3090.4,
				465.6, 1257.6,
				1585.6, 4454.4,
				4147.2, 2503.2,
				5953.6, 3094.4,
				1691.2, 4342.4,
				4152.0, 2500.8,
				1576.8, 4439.2,
				4156.0, 2501.6,
				3290.4, 2364.8,
				480.0, 1249.6,
				3279.2, 2364.8,
				1480.0, 5539.2,
				1499.2, 5549.6,
				3150.4, 2793.6,
				2961.6, 2960.0,
				2820.8, 3099.2,
				3366.4, 1628.8,
				2304.0, 3472.0,
				3072.0, 2889.6,
				3440.0, 1544.8,
				4502.4, 2456.0,
				5152.8, 2650.4,
				5151.2, 2655.2,
				2560.8, 3241.6,
				2838.4, 2020.0,
				2456.8, 3346.4,
				2838.4, 2024.0,
				1585.6, 2008.0,
				4399.2, 2557.6,
				3170.4, 2357.6,
				4599.2, 2367.2,
				3168.0, 2365.6,
				4396.0, 2552.0,
				4490.4, 2459.2,
				1981.6, 1936.0,
				1890.4, 2036.8,
				1379.2, 5425.6,
				1731.2, 4236.0,
				1380.8, 5418.4,
				1389.6, 5420.8,
				1704.8, 1959.2,
				1480.8, 5334.4,
				1785.6, 4158.4,
				1473.6, 5331.2,
				1772.8, 4157.6,
				2855.2, 2344.0,
				1494.4, 6112.0,
				2864.0, 2369.6,
				4503.2, 2498.4,
				1483.2, 6123.2,
				1480.0, 5011.2,
				5898.4, 3232.8,
				1376.0, 5421.6,
				1586.4, 6016.0,
				4390.4, 2584.8,
				1472.8, 5306.4,
				1582.4, 6019.2,
				3712.8, 2400.0,
				3716.8, 2390.4,
				5892.0, 3244.8,
				3721.6, 2400.0,
				1592.8, 4627.2,
				1492.0, 4725.6,
				2786.4, 2332.8,
				2756.0, 2444.0,
				6103.2, 3008.0,
				6110.4, 3015.2,
				1520.0, 6115.2,
				5999.2, 3099.2,
				1516.0, 6108.0,
				1522.4, 6111.2,
				2416.0, 2860.8,
				2514.4, 2759.2,
				1467.2, 5861.6,
				1566.4, 5756.8,
				1473.6, 5856.8,
				4044.0, 2574.4,
				5716.8, 2827.2,
				4021.6, 2403.2,
				4017.6, 2398.4,
				4024.8, 2405.6,
				3164.0, 2768.8,
				5012.0, 2604.8,
				3492.8, 2412.8,
				1560.8, 5444.8,
				1467.2, 5548.0,
				4668.0, 2519.2,
				4676.0, 2509.6,
				4870.4, 2304.8,
				1464.0, 5548.0,
				1369.6, 5637.6,
				1764.8, 4152.8,
				3424.0, 1448.0,
				1383.2, 5438.4,
				3276.8, 2304.8,
				6056.8, 2860.8,
				3180.8, 2398.4,
				1773.6, 4052.8,
				3179.2, 2404.0,
				1764.8, 4048.0,
				3088.8, 2504.0,
				5452.0, 2655.2,
				5345.6, 2744.8,
				5334.4, 2759.2,
				6040.0, 2859.2,
				6054.4, 2865.6,
				2454.4, 2876.8,
				2454.4, 2877.6,
				5967.2, 2964.0,
				2120.8, 3357.6,
				2223.2, 3260.0,
				1532.0, 5652.0,
				2129.6, 3357.6,
				1413.6, 5751.2,
				2126.4, 3359.2,
				5420.8, 2636.0,
				1429.6, 5756.8,
				4516.8, 2512.8,
				4024.0, 2397.6,
				5320.0, 2748.0,
				626.4, 1656.0,
				2556.0, 2615.2,
				4627.2, 2516.8,
				2547.2, 2604.8,
				3390.4, 2383.2,
				2748.8, 2405.6,
				3384.8, 2384.0,
				5321.6, 2742.4,
				2655.2, 2503.2,
				3598.4, 2436.8,
				2229.6, 3570.4,
				3708.0, 2344.0,
				2229.6, 3566.4,
				3604.8, 2440.8,
				1656.0, 4157.6,
				1848.0, 3940.0,
				2543.2, 2744.0,
				1389.6, 5155.2,
				2832.8, 2272.0,
				2756.8, 2414.4,
				2685.6, 2492.0,
				2570.4, 2603.2,
				1611.2, 4562.4,
				2680.0, 2492.0,
				1508.0, 4665.6,
				3392.8, 2391.2,
				3478.4, 2308.0,
				6086.4, 2994.4};
double[] coordB ={2592.0,	3207.2,
		2095.2,	3422.4,
		3918.4,	2382.4,
		3915.2,	2384.8,
		1640.8,	2083.2,
		3902.4,	2375.2,
		1623.2,	2056.0,
		1729.6,	1972.8,
		2258.4,	2328.0,
		1780.0,	4105.6,
		2348.0,	2228.8,
		2261.6,	2317.6,
		4023.2,	2508.0,
		3256.8,	2604.0,
		3592.8,	2405.6,
		4876.8,	2564.8,
		3601.6,	2404.0,
		4896.8,	2584.0,
		3267.2,	2586.4,
		5456.0,	2952.0,
		5559.2,	2866.4,
		1795.2,	4036.8,
		1696.0,	4129.6,
		2973.6,	1876.0,
		2974.4,	1884.8,
		1689.6,	4129.6,
		2372.8,	2980.8,
		3596.0,	2340.0,
		4504.0,	2548.8,
		4497.6,	2537.6,
		4494.4,	2555.2,
		4502.4,	2537.6,
		3122.4,	1740.8,
		3020.8,	1836.0,
		4598.4,	2444.8,
		3026.4,	1837.6,
		1485.6,	1900.0,
		1480.8,	1888.8,
		1476.8,	1886.4,
		4506.4,	2550.4,
		1462.4,	1882.4,
		3881.6,	2484.8,
		4741.6,	2545.6,
		3972.8,	2427.2,
		4650.4,	2652.8,
		3876.0,	2529.6,
		4748.8,	2520.0,
		4249.6,	2368.0,
		4476.0,	2488.0,
		1864.0,	3988.8,
		2142.4,	2318.4,
		1862.4,	3983.2,
		2239.2,	2212.8,
		2144.0,	2305.6,
		4901.6,	2662.4,
		2149.6,	2310.4,
		5000.8,	2564.0,
		5531.2,	2841.6,
		4845.6,	2456.0,
		3867.2,	2483.2,
		4653.6,	2654.4,
		3784.0,	2583.2,
		3264.8,	1743.2,
		3355.2,	1664.0,
		1466.4,	4728.8,
		1457.6,	4728.8,
		1460.8,	4727.2,
		2203.2,	3332.8,
		1556.0,	4618.4,
		2103.2,	3438.4,
		1456.0,	4732.8,
		3380.8,	2506.4,
		3360.8,	1660.0,
		3364.8,	2500.0,
		2116.8,	3426.4,
		3459.2,	1571.2,
		3460.8,	2400.8,
		1459.2,	4724.0,
		2089.6,	3432.0,
		3450.4,	1558.4,
		3456.8,	2396.8,
		2528.8,	2757.6,
		3447.2,	1574.4,
		3356.8,	2500.8,
		2521.6,	2760.8,
		3359.2,	1678.4,
		2524.8,	2766.4,
		3258.4,	1764.8,
		3358.4,	1664.8,
		3304.8,	1773.6,
		2187.2,	3592.0,
		1848.0,	3792.8,
		1848.8,	3801.6,
		1836.0,	3803.2,
		1939.2,	3706.4,
		1940.8,	3701.6,
		1952.8,	3706.4,
		1974.4,	2188.8,
		5850.4,	3195.2,
		3091.2,	1836.8,
		3189.6,	1748.0,
		1416.0,	5346.4,
		1701.6,	4232.8,
		3296.0,	2576.8,
		5872.8,	3202.4,
		5145.6,	2616.0,
		5960.8,	3100.0,
		5888.0,	3196.8,
		3974.4,	2379.2,
		5875.2,	3194.4,
		5860.0,	3204.8,
		3175.2,	2764.0,
		584.8,	1797.6,
		2956.8,	1903.2,
		3916.8,	2398.4,
		3920.8,	2395.2,
		3910.4,	2402.4,
		2708.8,	3131.2,
		2714.4,	3131.2,
		4660.8,	2418.4,
		2709.6,	3108.8,
		4355.2,	2444.8,
		4254.4,	2543.2,
		4359.2,	2440.8,
		1662.4,	4255.2,
		2844.8,	2244.0,
		2638.4,	2432.0,
		3373.6,	1611.2,
		2735.2,	2333.6,
		3377.6,	1608.0,
		2707.2,	2444.0,
		3492.8,	2356.8,
		2636.8,	2527.2,
		2535.2,	2636.0,
		2116.0,	2183.2,
		2087.2,	2168.8,
		4504.8,	2471.2,
		5760.8,	2898.4,
		4588.8,	2547.2,
		1005.6,	1699.2,
		1112.0,	1616.0,
		4468.8,	2460.0,
		1374.4,	5638.4,
		2326.4,	3470.4,
		4576.0,	2362.4,
		1372.0,	5638.4,
		2424.8,	3373.6,
		1459.2,	5532.8,
		5615.2,	2786.4,
		5620.0,	2785.6,
		2113.6,	3465.6,
		2004.8,	3564.0,
		2108.0,	3458.4,
		2527.2,	2698.4,
		2104.0,	3456.8,
		4255.2,	2463.2,
		4248.0,	2464.8,
		1360.8,	5644.0,
		4357.6,	2359.2,
		1376.0,	5638.4,
		2519.2,	2702.4,
		4358.4,	2362.4,
		1472.0,	5539.2,
		1576.0,	4502.4,
		2528.8,	2708.0,
		1476.8,	5534.4,
		1600.0,	4480.8,
		563.2,	1572.8,
		1475.2,	5538.4,
		1507.2,	4576.8,
		2100.8,	3471.2,
		1477.6,	5535.2,
		1687.2,	4384.0,
		2109.6,	3463.2,
		1603.2,	4484.0,
		2108.8,	3468.0,
		2230.4,	2163.2,
		465.6,	1654.4,
		1604.0,	4484.8,
		2132.8,	2264.0,
		5601.6,	2900.0,
		579.2,	1565.6,
		1603.2,	4479.2,
		562.4,	1545.6,
		588.8,	1570.4,
		5599.2,	2895.2,
		3988.0,	2260.0,
		699.2,	1359.2,
		3947.2,	2387.2,
		547.2,	1567.2,
		3916.8,	2372.0,
		471.2,	1676.8,
		575.2,	1582.4,
		684.0,	1504.0,
		1871.2,	3796.0,
		2004.0,	2311.2,
		2248.8,	3488.8,
		2815.2,	2155.2,
		2371.2,	2257.6,
		2269.6,	2360.0,
		2280.0,	2358.4,
		5444.0,	2681.6,
		1768.0,	4207.2,
		1995.2,	3595.2,
		2016.0,	3592.0,
		3474.4,	2397.6,
		1532.8,	5545.6,
		2018.4,	3590.4,
		1433.6,	5638.4,
		2013.6,	3596.8,
		1432.0,	5640.8,
		1927.2,	3688.0,
		1089.6,	1700.0,
		1615.2,	4680.0,
		1503.2,	5884.8,
		2572.8,	3243.2,
		2667.2,	3152.8,
		2003.2,	3601.6,
		2673.6,	3147.2,
		2003.2,	3604.8,
		2569.6,	3243.2,
		1579.2,	4529.6,
		2008.0,	3601.6,
		2579.2,	3253.6,
		1779.2,	4125.6,
		5659.2,	2970.4,
		5764.8,	2862.4,
		5757.6,	2876.0,
		4264.8,	2534.4,
		1824.0,	4068.8,
		1724.0,	4166.4,
		1694.4,	4276.0,
		1589.6,	4377.6,
		1557.6,	1948.0,
		1463.2,	2054.4,
		1644.0,	1852.8,
		5008.8,	2654.4,
		5095.2,	2551.2,
		600.8,	1608.0,
		5089.6,	2564.0,
		2455.2,	2941.6,
		2263.2,	3127.2,
		1580.8,	6141.6,
		3397.6,	2377.6,
		3395.2,	2380.8,
		1560.0,	6142.4,
		1578.4,	6136.8,
		1656.8,	2132.0,
		5145.6,	2596.8,
		5158.4,	2596.0,
		2204.0,	2160.0,
		4502.4,	2487.2,
		4593.6,	2409.6,
		274.4,	1176.8,
		2956.8,	3027.2,
		4577.6,	2398.4,
		2115.2,	2238.4,
		2223.2,	2141.6,
		2214.4,	2140.8,
		2213.6,	2131.2,
		2122.4,	2248.8,
		2114.4,	2240.0,
		2119.2,	2244.0,
		2226.4,	2156.8};  

		
		
int width = 6400;
int height = 6400;

		ByteProcessor IP  = new ByteProcessor(width,height);			
		for (int x = 0; x < width; x++){
			for (int y = 0; y < height; y++){
				IP.putPixel(x, y, 0); // Set all data points to 0 as start.
			}
			
		}
		for (int i = 0; i < coordA.length; i += 2)
		{
			IP.putPixel((int) Math.round(coordA[i]),(int) Math.round(coordA[i+1]), IP.get((int)Math.round(coordA[i]), (int)Math.round(coordA[i+1])) + 1);
			Particle P = new Particle();
			P.x	= coordA[i];
			P.y	= coordA[i+1];
			A.add(P);

		}
		for (int i = 0; i < coordB.length; i += 2)
		{
			IP.putPixel((int) Math.round(coordB[i]),(int) Math.round(coordB[i+1]), IP.get((int)Math.round(coordB[i]), (int)Math.round(coordB[i+1])) + 1);
			Particle P = new Particle();
			P.x	= coordB[i];
			P.y	= coordB[i+1];
			B.add(P);
		}		
		ImagePlus Image = new ImagePlus("Start",IP);
		Image.setImage(Image);
		Image.show(); 						
		int[] maxShift = {500*500,250*250,250*250};	// maximal shift (+/-).
		long start = System.nanoTime();
		driftCorr AC = new driftCorr(A,B,maxShift);

		double shift[] = AC.optimize();
		long stop = System.nanoTime();
		long elapsed = (stop-start)/1000000;
		System.out.println(shift[0]+  "x" +shift[1]+"x"+shift[2] + " in " + elapsed + " ms");
	/*	ByteProcessor IP2  = new ByteProcessor(width,height);			
		for (int x = 0; x < width; x++){
			for (int y = 0; y < height; y++){
				IP2.putPixel(x, y, 0); // Set all data points to 0 as start.
			}
			
		}
	
		for (int i = 0; i < 200; i++){

				int x = (int) Math.round(A.get(i).x);
				int y = (int) Math.round(A.get(i).y);				
				IP2.putPixel(x, y, (IP2.get(x, y) + 1));
				x = (int) Math.round(B.get(i).x + shift[0]);
				y = (int) Math.round(B.get(i).y + shift[1]);				
				IP2.putPixel(x, y, (IP2.get(x, y) + 1));

		}		
		ImagePlus Image2 = new ImagePlus("Corrected",IP2);
		Image2.setImage(Image2);
		Image2.show(); 	
		*/
		
		
	}
}


